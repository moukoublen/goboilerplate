// Code generated by mockery v2.46.2. DO NOT EDIT.

package httplog

import (
	bufio "bufio"
	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"

	net "net"

	time "time"
)

// MockNetHTTPResponse is an autogenerated mock type for the netHTTPResponse type
type MockNetHTTPResponse struct {
	mock.Mock
}

type MockNetHTTPResponse_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNetHTTPResponse) EXPECT() *MockNetHTTPResponse_Expecter {
	return &MockNetHTTPResponse_Expecter{mock: &_m.Mock}
}

// EnableFullDuplex provides a mock function with given fields:
func (_m *MockNetHTTPResponse) EnableFullDuplex() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnableFullDuplex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNetHTTPResponse_EnableFullDuplex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableFullDuplex'
type MockNetHTTPResponse_EnableFullDuplex_Call struct {
	*mock.Call
}

// EnableFullDuplex is a helper method to define mock.On call
func (_e *MockNetHTTPResponse_Expecter) EnableFullDuplex() *MockNetHTTPResponse_EnableFullDuplex_Call {
	return &MockNetHTTPResponse_EnableFullDuplex_Call{Call: _e.mock.On("EnableFullDuplex")}
}

func (_c *MockNetHTTPResponse_EnableFullDuplex_Call) Run(run func()) *MockNetHTTPResponse_EnableFullDuplex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNetHTTPResponse_EnableFullDuplex_Call) Return(_a0 error) *MockNetHTTPResponse_EnableFullDuplex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetHTTPResponse_EnableFullDuplex_Call) RunAndReturn(run func() error) *MockNetHTTPResponse_EnableFullDuplex_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function with given fields:
func (_m *MockNetHTTPResponse) Flush() {
	_m.Called()
}

// MockNetHTTPResponse_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockNetHTTPResponse_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *MockNetHTTPResponse_Expecter) Flush() *MockNetHTTPResponse_Flush_Call {
	return &MockNetHTTPResponse_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *MockNetHTTPResponse_Flush_Call) Run(run func()) *MockNetHTTPResponse_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNetHTTPResponse_Flush_Call) Return() *MockNetHTTPResponse_Flush_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetHTTPResponse_Flush_Call) RunAndReturn(run func()) *MockNetHTTPResponse_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// FlushError provides a mock function with given fields:
func (_m *MockNetHTTPResponse) FlushError() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FlushError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNetHTTPResponse_FlushError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushError'
type MockNetHTTPResponse_FlushError_Call struct {
	*mock.Call
}

// FlushError is a helper method to define mock.On call
func (_e *MockNetHTTPResponse_Expecter) FlushError() *MockNetHTTPResponse_FlushError_Call {
	return &MockNetHTTPResponse_FlushError_Call{Call: _e.mock.On("FlushError")}
}

func (_c *MockNetHTTPResponse_FlushError_Call) Run(run func()) *MockNetHTTPResponse_FlushError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNetHTTPResponse_FlushError_Call) Return(_a0 error) *MockNetHTTPResponse_FlushError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetHTTPResponse_FlushError_Call) RunAndReturn(run func() error) *MockNetHTTPResponse_FlushError_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function with given fields:
func (_m *MockNetHTTPResponse) Header() http.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 http.Header
	if rf, ok := ret.Get(0).(func() http.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Header)
		}
	}

	return r0
}

// MockNetHTTPResponse_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type MockNetHTTPResponse_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *MockNetHTTPResponse_Expecter) Header() *MockNetHTTPResponse_Header_Call {
	return &MockNetHTTPResponse_Header_Call{Call: _e.mock.On("Header")}
}

func (_c *MockNetHTTPResponse_Header_Call) Run(run func()) *MockNetHTTPResponse_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNetHTTPResponse_Header_Call) Return(_a0 http.Header) *MockNetHTTPResponse_Header_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetHTTPResponse_Header_Call) RunAndReturn(run func() http.Header) *MockNetHTTPResponse_Header_Call {
	_c.Call.Return(run)
	return _c
}

// Hijack provides a mock function with given fields:
func (_m *MockNetHTTPResponse) Hijack() (net.Conn, *bufio.ReadWriter, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Hijack")
	}

	var r0 net.Conn
	var r1 *bufio.ReadWriter
	var r2 error
	if rf, ok := ret.Get(0).(func() (net.Conn, *bufio.ReadWriter, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() net.Conn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func() *bufio.ReadWriter); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*bufio.ReadWriter)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockNetHTTPResponse_Hijack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hijack'
type MockNetHTTPResponse_Hijack_Call struct {
	*mock.Call
}

// Hijack is a helper method to define mock.On call
func (_e *MockNetHTTPResponse_Expecter) Hijack() *MockNetHTTPResponse_Hijack_Call {
	return &MockNetHTTPResponse_Hijack_Call{Call: _e.mock.On("Hijack")}
}

func (_c *MockNetHTTPResponse_Hijack_Call) Run(run func()) *MockNetHTTPResponse_Hijack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNetHTTPResponse_Hijack_Call) Return(_a0 net.Conn, _a1 *bufio.ReadWriter, _a2 error) *MockNetHTTPResponse_Hijack_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockNetHTTPResponse_Hijack_Call) RunAndReturn(run func() (net.Conn, *bufio.ReadWriter, error)) *MockNetHTTPResponse_Hijack_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFrom provides a mock function with given fields: src
func (_m *MockNetHTTPResponse) ReadFrom(src io.Reader) (int64, error) {
	ret := _m.Called(src)

	if len(ret) == 0 {
		panic("no return value specified for ReadFrom")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader) (int64, error)); ok {
		return rf(src)
	}
	if rf, ok := ret.Get(0).(func(io.Reader) int64); ok {
		r0 = rf(src)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(src)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetHTTPResponse_ReadFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFrom'
type MockNetHTTPResponse_ReadFrom_Call struct {
	*mock.Call
}

// ReadFrom is a helper method to define mock.On call
//   - src io.Reader
func (_e *MockNetHTTPResponse_Expecter) ReadFrom(src interface{}) *MockNetHTTPResponse_ReadFrom_Call {
	return &MockNetHTTPResponse_ReadFrom_Call{Call: _e.mock.On("ReadFrom", src)}
}

func (_c *MockNetHTTPResponse_ReadFrom_Call) Run(run func(src io.Reader)) *MockNetHTTPResponse_ReadFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader))
	})
	return _c
}

func (_c *MockNetHTTPResponse_ReadFrom_Call) Return(n int64, err error) *MockNetHTTPResponse_ReadFrom_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockNetHTTPResponse_ReadFrom_Call) RunAndReturn(run func(io.Reader) (int64, error)) *MockNetHTTPResponse_ReadFrom_Call {
	_c.Call.Return(run)
	return _c
}

// SetReadDeadline provides a mock function with given fields: deadline
func (_m *MockNetHTTPResponse) SetReadDeadline(deadline time.Time) error {
	ret := _m.Called(deadline)

	if len(ret) == 0 {
		panic("no return value specified for SetReadDeadline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(deadline)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNetHTTPResponse_SetReadDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReadDeadline'
type MockNetHTTPResponse_SetReadDeadline_Call struct {
	*mock.Call
}

// SetReadDeadline is a helper method to define mock.On call
//   - deadline time.Time
func (_e *MockNetHTTPResponse_Expecter) SetReadDeadline(deadline interface{}) *MockNetHTTPResponse_SetReadDeadline_Call {
	return &MockNetHTTPResponse_SetReadDeadline_Call{Call: _e.mock.On("SetReadDeadline", deadline)}
}

func (_c *MockNetHTTPResponse_SetReadDeadline_Call) Run(run func(deadline time.Time)) *MockNetHTTPResponse_SetReadDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockNetHTTPResponse_SetReadDeadline_Call) Return(_a0 error) *MockNetHTTPResponse_SetReadDeadline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNetHTTPResponse_SetReadDeadline_Call) RunAndReturn(run func(time.Time) error) *MockNetHTTPResponse_SetReadDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// SetWriteDeadline provides a mock function with given fields: deadline
func (_m *MockNetHTTPResponse) SetWriteDeadline(deadline time.Time) {
	_m.Called(deadline)
}

// MockNetHTTPResponse_SetWriteDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWriteDeadline'
type MockNetHTTPResponse_SetWriteDeadline_Call struct {
	*mock.Call
}

// SetWriteDeadline is a helper method to define mock.On call
//   - deadline time.Time
func (_e *MockNetHTTPResponse_Expecter) SetWriteDeadline(deadline interface{}) *MockNetHTTPResponse_SetWriteDeadline_Call {
	return &MockNetHTTPResponse_SetWriteDeadline_Call{Call: _e.mock.On("SetWriteDeadline", deadline)}
}

func (_c *MockNetHTTPResponse_SetWriteDeadline_Call) Run(run func(deadline time.Time)) *MockNetHTTPResponse_SetWriteDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockNetHTTPResponse_SetWriteDeadline_Call) Return() *MockNetHTTPResponse_SetWriteDeadline_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetHTTPResponse_SetWriteDeadline_Call) RunAndReturn(run func(time.Time)) *MockNetHTTPResponse_SetWriteDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: _a0
func (_m *MockNetHTTPResponse) Write(_a0 []byte) (int, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetHTTPResponse_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockNetHTTPResponse_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - _a0 []byte
func (_e *MockNetHTTPResponse_Expecter) Write(_a0 interface{}) *MockNetHTTPResponse_Write_Call {
	return &MockNetHTTPResponse_Write_Call{Call: _e.mock.On("Write", _a0)}
}

func (_c *MockNetHTTPResponse_Write_Call) Run(run func(_a0 []byte)) *MockNetHTTPResponse_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockNetHTTPResponse_Write_Call) Return(_a0 int, _a1 error) *MockNetHTTPResponse_Write_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNetHTTPResponse_Write_Call) RunAndReturn(run func([]byte) (int, error)) *MockNetHTTPResponse_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteHeader provides a mock function with given fields: statusCode
func (_m *MockNetHTTPResponse) WriteHeader(statusCode int) {
	_m.Called(statusCode)
}

// MockNetHTTPResponse_WriteHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteHeader'
type MockNetHTTPResponse_WriteHeader_Call struct {
	*mock.Call
}

// WriteHeader is a helper method to define mock.On call
//   - statusCode int
func (_e *MockNetHTTPResponse_Expecter) WriteHeader(statusCode interface{}) *MockNetHTTPResponse_WriteHeader_Call {
	return &MockNetHTTPResponse_WriteHeader_Call{Call: _e.mock.On("WriteHeader", statusCode)}
}

func (_c *MockNetHTTPResponse_WriteHeader_Call) Run(run func(statusCode int)) *MockNetHTTPResponse_WriteHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockNetHTTPResponse_WriteHeader_Call) Return() *MockNetHTTPResponse_WriteHeader_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNetHTTPResponse_WriteHeader_Call) RunAndReturn(run func(int)) *MockNetHTTPResponse_WriteHeader_Call {
	_c.Call.Return(run)
	return _c
}

// WriteString provides a mock function with given fields: data
func (_m *MockNetHTTPResponse) WriteString(data string) (int, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for WriteString")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNetHTTPResponse_WriteString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteString'
type MockNetHTTPResponse_WriteString_Call struct {
	*mock.Call
}

// WriteString is a helper method to define mock.On call
//   - data string
func (_e *MockNetHTTPResponse_Expecter) WriteString(data interface{}) *MockNetHTTPResponse_WriteString_Call {
	return &MockNetHTTPResponse_WriteString_Call{Call: _e.mock.On("WriteString", data)}
}

func (_c *MockNetHTTPResponse_WriteString_Call) Run(run func(data string)) *MockNetHTTPResponse_WriteString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockNetHTTPResponse_WriteString_Call) Return(n int, err error) *MockNetHTTPResponse_WriteString_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockNetHTTPResponse_WriteString_Call) RunAndReturn(run func(string) (int, error)) *MockNetHTTPResponse_WriteString_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNetHTTPResponse creates a new instance of MockNetHTTPResponse. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNetHTTPResponse(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockNetHTTPResponse {
	mock := &MockNetHTTPResponse{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
