// Code generated by mockery v2.46.2. DO NOT EDIT.

package httplog

import mock "github.com/stretchr/testify/mock"

// MockBytesBuffer is an autogenerated mock type for the BytesBuffer type
type MockBytesBuffer struct {
	mock.Mock
}

type MockBytesBuffer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBytesBuffer) EXPECT() *MockBytesBuffer_Expecter {
	return &MockBytesBuffer_Expecter{mock: &_m.Mock}
}

// Bytes provides a mock function with given fields:
func (_m *MockBytesBuffer) Bytes() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Bytes")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockBytesBuffer_Bytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bytes'
type MockBytesBuffer_Bytes_Call struct {
	*mock.Call
}

// Bytes is a helper method to define mock.On call
func (_e *MockBytesBuffer_Expecter) Bytes() *MockBytesBuffer_Bytes_Call {
	return &MockBytesBuffer_Bytes_Call{Call: _e.mock.On("Bytes")}
}

func (_c *MockBytesBuffer_Bytes_Call) Run(run func()) *MockBytesBuffer_Bytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBytesBuffer_Bytes_Call) Return(_a0 []byte) *MockBytesBuffer_Bytes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBytesBuffer_Bytes_Call) RunAndReturn(run func() []byte) *MockBytesBuffer_Bytes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBytesBuffer creates a new instance of MockBytesBuffer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBytesBuffer(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockBytesBuffer {
	mock := &MockBytesBuffer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
