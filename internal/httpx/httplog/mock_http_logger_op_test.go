// Code generated by mockery v2.46.2. DO NOT EDIT.

package httplog

import mock "github.com/stretchr/testify/mock"

// MockHTTPLoggerOp is an autogenerated mock type for the HTTPLoggerOp type
type MockHTTPLoggerOp struct {
	mock.Mock
}

type MockHTTPLoggerOp_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHTTPLoggerOp) EXPECT() *MockHTTPLoggerOp_Expecter {
	return &MockHTTPLoggerOp_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *MockHTTPLoggerOp) Execute(_a0 *HTTPLogger) {
	_m.Called(_a0)
}

// MockHTTPLoggerOp_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockHTTPLoggerOp_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 *HTTPLogger
func (_e *MockHTTPLoggerOp_Expecter) Execute(_a0 interface{}) *MockHTTPLoggerOp_Execute_Call {
	return &MockHTTPLoggerOp_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *MockHTTPLoggerOp_Execute_Call) Run(run func(_a0 *HTTPLogger)) *MockHTTPLoggerOp_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*HTTPLogger))
	})
	return _c
}

func (_c *MockHTTPLoggerOp_Execute_Call) Return() *MockHTTPLoggerOp_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHTTPLoggerOp_Execute_Call) RunAndReturn(run func(*HTTPLogger)) *MockHTTPLoggerOp_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHTTPLoggerOp creates a new instance of MockHTTPLoggerOp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHTTPLoggerOp(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockHTTPLoggerOp {
	mock := &MockHTTPLoggerOp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
